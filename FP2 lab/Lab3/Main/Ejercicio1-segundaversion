// Laboratorio Nro 3 - Ejercicio 1 
// Autor: Sergio Estrada Arce
// Tiempo: 1h 34m
package Ejerciicios;
import java.util.*; 
public class Ejercicio1 {
    public static void main(String[] args) {
        Nave[] misNaves = new Nave[10];
        Scanner sc = new Scanner(System.in);
        String nomb, col;
        int fil, punt;
        boolean est;
        for (int i = 0; i < misNaves.length; i++) {
            System.out.println("Nave " + (i + 1));
            System.out.print("Nombre: ");
            nomb = sc.next();
            System.out.print("Fila: ");
            fil = sc.nextInt();
            System.out.print("Columna: ");
            col = sc.next();
            System.out.print("Estado (true/false): ");
            est = sc.nextBoolean();
            System.out.print("Puntos: ");
            punt = sc.nextInt();
            misNaves[i] = new Nave(); 
            misNaves[i].setNombre(nomb);
            misNaves[i].setFila(fil);
            misNaves[i].setColumna(col);
            misNaves[i].setEstado(est);
            misNaves[i].setPuntos(punt);
        }
        int opcion;
        do {
            System.out.println("\n--- Menú ---");
            System.out.println("1. Mostrar todas las naves");
            System.out.println("2. Buscar nave por nombre");
            System.out.println("3. Mostrar naves con puntos menores o iguales a un valor");
            System.out.println("4. Mostrar la nave con mayor puntaje");
            System.out.println("5. Desordenar naves aleatoriamente");
            System.out.println("6. Salir");
            System.out.print("Elige una opción: ");
            opcion = sc.nextInt();
            switch (opcion) {
                case 1:
                    mostrarNaves(misNaves);
                    break;
                case 2:
                    mostrarPorNombre(misNaves);
                    break;
                case 3:
                    mostrarPorPuntos(misNaves);
                    break;
                case 4:
                    Nave naveMayorPuntos = mostrarMayorPuntos(misNaves);
                    System.out.println("La nave con mayor puntaje es: " + naveMayorPuntos.getNombre() +
                                       " con " + naveMayorPuntos.getPuntos() + " puntos.");
                    break;
                case 5:
                    Nave[] navesDesordenadas = desordenarNaves(misNaves);
                    System.out.println("Naves desordenadas aleatoriamente:");
                    mostrarNaves(navesDesordenadas);
                    break;
                case 6:
                    System.out.println("Saliendo del programa...");
                    break;
                default:
                    System.out.println("Opción no válida, intenta nuevamente.");
            }
        } while (opcion != 6);
    }
    public static void mostrarNaves(Nave[] flota) {
        for (Nave nave : flota) {
            System.out.println("Nombre: " + nave.getNombre() +
                               ", Fila: " + nave.getFila() +
                               ", Columna: " + nave.getColumna() +
                               ", Estado: " + nave.getEstado() +
                               ", Puntos: " + nave.getPuntos());
        }
    }
    public static void mostrarPorNombre(Nave[] flota) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Ingrese el nombre de la nave a buscar: ");
        String nombreBuscado = sc.next();

        for (Nave nave : flota) {
            if (nave.getNombre().equalsIgnoreCase(nombreBuscado)) {
                System.out.println("Nombre: " + nave.getNombre() +
                                   ", Fila: " + nave.getFila() +
                                   ", Columna: " + nave.getColumna() +
                                   ", Estado: " + nave.getEstado() +
                                   ", Puntos: " + nave.getPuntos());
            }
        }
    }
    public static void mostrarPorPuntos(Nave[] flota) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Ingrese el número máximo de puntos: ");
        int puntosMaximos = sc.nextInt();

        for (Nave nave : flota) {
            if (nave.getPuntos() <= puntosMaximos) {
                System.out.println("Nombre: " + nave.getNombre() +
                                   ", Fila: " + nave.getFila() +
                                   ", Columna: " + nave.getColumna() +
                                   ", Estado: " + nave.getEstado() +
                                   ", Puntos: " + nave.getPuntos());
            }
        }
    }
    public static Nave mostrarMayorPuntos(Nave[] flota) {
        Nave naveConMasPuntos = flota[0];

        for (Nave nave : flota) {
            if (nave.getPuntos() > naveConMasPuntos.getPuntos()) {
                naveConMasPuntos = nave;
            }
        }

        return naveConMasPuntos;
    }
    public static Nave[] desordenarNaves(Nave[] flota) {
        List<Nave> listaNaves = Arrays.asList(flota);
        Collections.shuffle(listaNaves);
        return listaNaves.toArray(new Nave[0]);
    }
}
